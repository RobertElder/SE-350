<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<!-- saved from url=(0102)https://learn.uwaterloo.ca/d2l/lms/content/viewer/main_frame_2.d2l?ou=20215&tId=226343&d2l_body_type=1 -->
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-ca" xml:lang="en-ca"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		
		<title> - SE 350 - Winter 2012 - University of Waterloo</title>
		<script type="text/javascript">
		//<![CDATA[
			var Global = {OrgUnitId:20215,OrgId:6606,OrgName:'University of Waterloo',OrgUnitName:'SE 350 - Winter 2012',OrgUnitCode:'SE350_sfischme_1121',OrgUnitTypeId:3,OrgDefinedId:'20335246',OrgUnitPath:'\/content\/enforced\/20215-SE350_sfischme_1121\/',FirstName:'Robert',LastName:'Elder',UserName:'relder',UserId:13276,RoleId:107,RoleCode:'Student',ImageSetId:0,ImageVersion:'9.2.1.129-4',AssemblyVersion:'9.2.1.129-4',Language:{LanguageId:13},Culture:{IsRightToLeft:0},Preferences:{UseNonModalDialogs:0,FontFamily:'verdana',FontSize:11,MathDisplayType:'webeq'}};
			var BrowserInfo = {browserType:'Chrome',Type:10,MajorVersion:16,MinorVersion:0};
		//]]>
		</script>
		<script src="D2L.LP.Web.Core.js" type="text/javascript"></script>
		<script src="D2L.LP.Web.MathML.js" type="text/javascript"></script>
		<script src="D2L.LP.Web.EventController.js" type="text/javascript"></script>
		<script type="text/javascript">
		//<![CDATA[
			var EventController = new D2L.Events.EventController();
			var g_Events = new D2L.Events.Event();


		//]]>
		</script>
		<script type="text/javascript">
		//<![CDATA[
			D2L.Serialization.JsonDeserializerMin.Deserialize(['a2ccddc1cb74422ea3855323c3fce4be',278,832635433,1,{'d2l_body':0.6875},[{}],[[]],[[]],[[],0],[0,['Sun','Mon','Tue','Wed','Thu','Fri','Sat'],['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec',''],['January','February','March','April','May','June','July','August','September','October','November','December',''],'min','minute','minutes','h','hour','hours','day','days','^([\\(-]*(([01234567890123456789]?[01234567890123456789]?([01234567890123456789](,[01234567890123456789][01234567890123456789][01234567890123456789])*)))(\\.[01234567890123456789]+)?[\\)-]*)$|^([\\(-]*[01234567890123456789]*\\.?[01234567890123456789]+[\\)-]*)$','^([\\(-]*(([01234567890123456789]?[01234567890123456789]?([01234567890123456789](,[01234567890123456789][01234567890123456789][01234567890123456789])*)?))[\\)-]*)$|^([\\(-]*[01234567890123456789]+[\\)-]*)$',0,'.',1,'-',',',['0','1','2','3','4','5','6','7','8','9'],'%',0,0,[6,0],'M\/d\/yyyy',0,[3]],[],1,{'ClassName':'D2L.Util.DateTime','Year':2012,'Month':1,'Day':10,'Hour':14,'Minute':2,'Second':47,'Millisecond':690}],D2L.UI);
			D2L.Language.InitLang({'standard.buttons':{'btnremove':'Remove','btnremoveselected':'Remove Selected','btnpublish':'Publish','btnrefresh':'Refresh','btnreset':'Reset','btnreturn':'Return','btnrename':'Rename','btnreplace':'Replace','btnproceed':'Proceed','btnok':'OK','btnokay':'OK','btnnext':'Next ','btnno':'No ','btnprevious':'Previous ','btnprint':'Print','btnoverwrite':'Overwrite','btnpreview':'Preview','btnstart':'Start','btnsubmit':'Submit','btnshowall':'Show All','btnskip':'Skip','btnview':'View','btnyes':'Yes','btnupdate':'Update','btnupload':'Upload','btnset':'Set','btnsave':'Save','btnsaveandcopy':'Save and Copy','btnrevert':'Undo Unsaved Changes','btnrun':'Run','btnselectcurrentfolder':'Select Current Folder','btnsend':'Send','btnsaveandnew':'Save and New','btnsearch':'Search','btnnew':'New','btnclear':'Clear','btnclearall':'Clear All','btnchange':'Change','btnchangepassword':'Change Password','btnconfirm':'Confirm','btncontinue':'Continue','btnclearlist':'Clear List','btnclose':'Close','btncancel':'Cancel','btnaddanother':'Add Another','btnaddselected':'Add Selected','btnadd':'Add','btnaddandnew':'Add and New','btnback':'Back','btnbrowse':'Browse','btnadmin':'Admin','btnapply':'Apply','btngoback':'Go Back','btnhistory':'History','btnfinish':'Finish','btngo':'Go','btninsert':'Insert','btnlistall':'List All','btnhome':'Home','btnimport':'Import','btnexport':'Export','btndelete':'Delete','btndeleteselected':'Delete Selected','btncopy':'Copy','btncreate':'Create','btndownload':'Download','btnedit':'Edit','btndone':'Done','btndontsave':'Don\'t Save'},'framework.dialog':{'titinputrequested':'Choose a Value','titinformation':'Information','titerror':'Error','titwarning':'Warning','titsavechanges':'Save Changes','titprocessing':'Processing...','titconfirmation':'Confirmation','altjumptop':'Jump to top of [0] dialog','altjumpbottom':'Jump to bottom of [0] dialog','altclosedialog':'Close this Dialog','lblsaveconfirmationsecondary':'Do you want to save the changes?','lblsaveconfirmationprimary':'This page has been edited.','altresizedialog':'Resize this Dialog'},'framework.messagearea':{'lblstatus5':'Copied successfully','lblstatus4':'Reordered successfully','lblstatus3':'Created successfully','lblstatus6':'Imported successfully','lblstatus9':'Added successfully','lblstatus8':'Moved successfully','lblstatus7':'Exported successfully','lblstatus2':'Deleted successfully','lblstatus1':'Saved successfully','lblerrors':'There were [b][0] error(s)[\/b] found in the information you submitted:','hdrerrors':'Errors','lblstatus10':'Removed successfully','lblstatus13':'Sent successfully','lblstatus12':'Unenrolled successfully','lblstatus11':'Enrolled successfully'}},{'standard.misc.txtloading':'Loading...','standard.misc.txtcopyright':'Powered by Desire2Learn Incorporated'});
			D2L.Language.InitImg({'framework.messagearea':{'actstatus6':['0\/Framework.MessageArea.actStatus6.gif'],'actstatus5':['0\/Framework.MessageArea.actStatus5.gif'],'actstatus4':['0\/Framework.MessageArea.actStatus4.gif'],'actstatus9':['0\/Framework.MessageArea.actStatus9.gif'],'actstatus8':['0\/Framework.MessageArea.actStatus8.gif'],'actstatus7':['0\/Framework.MessageArea.actStatus7.gif'],'actstatus3':['0\/Framework.MessageArea.actStatus3.gif'],'actstatus11':['0\/Framework.MessageArea.actStatus11.gif'],'actstatus10':['0\/Framework.MessageArea.actStatus10.gif'],'actstatus1':['0\/Framework.MessageArea.actStatus1.gif'],'actstatus2':['0\/Framework.MessageArea.actStatus2.gif'],'actstatus13':['0\/Framework.MessageArea.actStatus13.gif'],'actstatus12':['0\/Framework.MessageArea.actStatus12.gif']}},{});
			function d2l_Onload() {
				UI.OnPageLoad().Trigger();
				NavManager.CurrentTopic.Init(226343);
			}
			function d2l_Onunload() {
				NavManager.UnloadCurrentTopic();
				UI.OnPageUnload().Trigger();
				D2L.GarbageCollection.Dispose();
			}
			UI.Init();
		//]]>
		</script>
		<script type="text/javascript">
		//<![CDATA[
		var runtimeData = D2L.Class.extend({
		
	Construct: function() {
	
		arguments.callee.$.Construct.call( this );
		
		this.ReturnValue = '';
		this.ErrorCode = '';
		
	},
	
	Deserialize: function( deserializer ) {
		this.ReturnValue = deserializer.GetMember('ReturnValue');
		this.ErrorCode = deserializer.GetMember('ErrorCode');
	}

});

var ViewerData = D2L.Class.extend({

	Construct: function() {
		
		arguments.callee.$.Construct.call( this );
		
		this.TopicId = 0;
		this.ActivityId = 0;
		this.DiscussTopicId = 0;
		this.DiscussHelpTopicId = 0;
		this.IsBookmarked = false;
		this.IsFirst = false;
		this.IsLast = false;
		this.HasSequencing = 0;
		this.ForwardOnly = false;
		this.HasChoice = false;
		this.ForceReload = false;
		this.DeviceVisibilityTypeMask = 0;
		this.ContentTypeId = 0;
		this.Location = '';
		this.Title = '';
		this.FormattedTitle = '';
		this.TargetFrame = '';
		this.IsCurrentUserAuthorized = true;
	},
	
	Deserialize: function( deserializer ) {
		this.TopicId = deserializer.GetMember('TopicId');
		this.ActivityId = deserializer.GetMember('ActivityId');
		this.DiscussTopicId = deserializer.GetMember('DiscussTopicId');
		this.DiscussHelpTopicId = deserializer.GetMember('DiscussHelpTopicId');
		this.IsBookmarked = deserializer.GetMember('IsBookmarked');
		this.IsFirst = deserializer.GetMember('IsFirst');
		this.IsLast = deserializer.GetMember('IsLast');
		this.HasSequencing = deserializer.GetMember('HasSequencing');
		this.ForwardOnly = deserializer.GetMember('ForwardOnly');
		this.HasChoice = deserializer.GetMember('HasChoice');
		this.ForceReload = deserializer.GetMember('ForceReload');
		this.DeviceVisibilityTypeMask = deserializer.GetMember('DeviceVisibilityTypeMask');
		this.ContentTypeId = deserializer.GetMember('ContentTypeId');
		this.Location = deserializer.GetMember('Location');
		this.Title = deserializer.GetMember('Title');
		this.FormattedTitle = deserializer.GetMember('FormattedTitle');
		this.TargetFrame = deserializer.GetMember('TargetFrame');
		this.IsCurrentUserAuthorized = deserializer.GetMember('IsCurrentUserAuthorized');
	}

});

NavManager = function() {
	this.HasCurrentTopicUndocked = false;
	this.UndockWindowName = '';
	this.ChoosedObjectId = -1;
	this.ChoosedObjectIsSequenced = false;
	this.CurrentAction = '_none_';
	this.SeqErrorsForChoice = {
		'NB_2_1_4':'NB_2_1_4',
		'NB_2_1_5':'NB_2_1_5',
		'NB_2_1_11':'NB_2_1_11',
		'NB_2_1_2':'NB_2_1_2',
		'SB_2_1_2':'SB_2_1_2',
		'SB_2_2_1':'SB_2_2_1',
		'SB_2_2_2':'SB_2_2_2',
		'SB_2_7_2':'SB_2_7_2',
		'SB_2_8_2':'SB_2_8_2',
		'SB_2_9_1':'SB_2_9_1',
		'SB_2_9_2':'SB_2_9_2',
		'SB_2_9_3':'SB_2_9_3',
		'SB_2_9_4':'SB_2_9_4',
		'SB_2_9_9':'SB_2_9_9',
		'SB_2_10_3':'SB_2_10_3',
		'SB_2_10_3':'SB_2_10_3',
		'DB_1_1_2':'DB_1_1_2',
		'DB_1_1_3':'DB_1_1_3'
	};
	this.CurrentTopic = {
		TopicId : -1,
		DiscussHelpTopicId : -1,
		DiscussTopicId : -1,
		ShowContentMap : true,
		Title : 'No Title',
		FormattedTitle: 'No Title',
		HasBookmark : false,
		IsLast : false,
		IsFirst : false,
		HasPrint : true,
		Location : '',
		ContentTypeId : -1,
		HasSequencing : false,
		ActivityId : -1,
		HasChoice : false,
		DeviceVisibilityTypeMask : 0,
		ForwardOnly : false,
		LoadedViewer : false,
		ForceReload : false,
		TargetFrame : '',
		IsCurrentUserAuthorized:true,
		Init : function(topicId) {
			var rpcResponse = D2L.Rpc.CreateSynchronous( 'FetchTopicData' ).Call( topicId );
			this.InitResult( rpcResponse.GetResult( ViewerData ) );
		},
		InitResult : function( result ) {
			this.CurrentAction = '_none_';
			this.ChoosedObjectId = -1;
			this.ChoosedObjectIsSequenced = false;
			this.TopicId = result.TopicId;
			this.LoadedViewer = false;
	
			this.DiscussHelpTopicId = result.DiscussHelpTopicId;
			this.DiscussTopicId = result.DiscussTopicId;
			
			this.HasBookmark = result.IsBookmarked;
			
			this.Location = result.Location;
			
			this.ContentTypeId = result.ContentTypeId;
			this.Title = result.Title;
			this.FormattedTitle = result.FormattedTitle;
            if (result.TargetFrame != null){
                this.TargetFrame = result.TargetFrame;
            }
			this.IsFirst = result.IsFirst;
			this.IsLast = result.IsLast;
			this.ForwardOnly = result.ForwardOnly;
			this.ForceReload = result.ForceReload;
			this.HasChoice = result.HasChoice;
			this.HasSequencing  = result.HasSequencing;
			if( this.HasSequencing ) {
			    this.ForceReload = true;
			}
			this.ActivityId = result.ActivityId;
			this.IsCurrentUserAuthorized = result.IsCurrentUserAuthorized;
			
			this.DeviceVisibilityTypeMask = result.DeviceVisibilityTypeMask;
			this.InitAPI( result.ActivityId, result.HasSequencing );
			this.InitViewer();
		},
		InitViewer : function() {
			if( this.ForceReload ) {
				if( frames['TOCFrame'] && frames['TOCFrame']['forceReload'] ) {
					frames['TOCFrame']['forceReload']( this.TopicId, this.HasSequencing );
				}
			} else {
				if( frames['TOCFrame'] && frames['TOCFrame']['updateContentMap'] ) {
					frames['TOCFrame']['updateContentMap']( this.TopicId );
				}
			}
			
			if( frames['ContentFrame'] && frames['ContentFrame']['InitActionBar'] ) {
				frames['ContentFrame']['InitActionBar']();
			}
			
			if( frames['ContentFrame'] && frames['ContentFrame']['LoadTopic'] ) {
				frames['ContentFrame']['LoadTopic']();
				this.LoadedViewer = true;
			} else {
				frames['ContentFrame'].location.href = '/d2l/lms/content/viewer/content_frame.d2l?ou=20215';
			}
		},
		InitAPI : function( activityId, isSequenced ) {
			if( window.API ) {
				window.API.Init( activityId );
			}

			if( window.API_1484_11 ) {
				window.API_1484_11.Init( activityId, isSequenced );
			}
		},
		GetTopicId : function() {
			return this.TopicId;
		},
		GetTitle : function() {
			return this.Title;
		},
		GetFormattedTitle : function() {
			return this.FormattedTitle;
		},
		GetActivityId : function() {
			return this.ActivityId;
		},
		GetDeviceVisibilityTypeMask : function() {
			return this.DeviceVisibilityTypeMask;
		}
	};

}

NavManager.prototype.UnloadCurrentTopic = function() {
	if (this.CurrentTopic.TopicId != -1) {
		D2L.Rpc.CreateSynchronous('UnloadCurrentTopic').Call(this.CurrentTopic.TopicId);
		this.CurrentTopic.TopicId = -1;
	}
}

NavManager.prototype.MoveNext = function() {

	var rpcResponse = D2L.Rpc.CreateSynchronous( 'GetNextTopic', '/d2l/lms/content/viewer/main_frame_2.d2l' ).Call( this.CurrentTopic.TopicId, true );

	if( rpcResponse.GetResponseType() == D2L.Rpc.ResponseType.Success ) {
		var result = rpcResponse.GetResult( ViewerData );
		
		
		
		var thisObj = this;		
		
		
		if( ! result.IsCurrentUserAuthorized ) {
			if( frames['ContentFrame'] && frames['ContentFrame']['AuthorizeUser'] ) {
				var authResult = frames['ContentFrame']['AuthorizeUser']( result.TopicId );
			
				authResult.Register( 
					function( authOk ) {
						if( authOk ) {
							DoMoveNext( thisObj );						
						}
					}
				);
			}
		} else {
			DoMoveNext( thisObj );
		}
	}
}

function DoMoveNext( thisObject ) {
	if( thisObject.CurrentTopic.HasSequencing ) {
		if( !window.API_1484_11.IsTerminated && window.API_1484_11.IsInitialized ) {
			thisObject.UnloadContentFrame( false );
			window.API_1484_11.SetNavRequest( 'continue' );
		} else {
			D2L.Rpc.Create( 'PerformNavRequest', thisObject.HandleSCORMNavRequest, '/d2l/lms/scorm/runtimeAPI.d2l' ).Call( thisObject.CurrentTopic.TopicId, 'continue' );
		}
	} else {
		thisObject.CurrentAction = 'next';
		thisObject.UnloadContentFrame( false );
	}
}

NavManager.prototype.MovePrev = function() {

	var rpcResponse = D2L.Rpc.CreateSynchronous( 'GetNextTopic', '/d2l/lms/content/viewer/main_frame_2.d2l' ).Call( this.CurrentTopic.TopicId, false );

	if( rpcResponse.GetResponseType() == D2L.Rpc.ResponseType.Success ) {
		var result = rpcResponse.GetResult( ViewerData );
		
		
		
		var thisObj = this;
		
		
		if( ! result.IsCurrentUserAuthorized ) {
			if( frames['ContentFrame'] && frames['ContentFrame']['AuthorizeUser'] ) {
				var authResult = frames['ContentFrame']['AuthorizeUser']( result.TopicId );
			
				authResult.Register( 
					function( authOk ) {
						if( authOk ) {
							DoMovePrev( thisObj );
						}
					}
				);
			}
		} else {
			DoMovePrev( thisObj );
		}
	}
}

function DoMovePrev( thisObj ) {
	if( thisObj.HasSequencing ) {
		if( !window.API_1484_11.IsTerminated && window.API_1484_11.IsInitialized ) {
			unloadFun( false );
			window.API_1484_11.SetNavRequest( 'previous' );
		} else {
			D2L.Rpc.Create( 'PerformNavRequest', thisObj.HandleSCORMNavRequest, '/d2l/lms/scorm/runtimeAPI.d2l' ).Call( thisObj.CurrentTopic.TopicId, 'previous' );
		}
	} else {
		thisObj.CurrentAction = 'prev';
		thisObj.UnloadContentFrame( false );
	}
}

NavManager.prototype.MoveToTopic = function( objectId, isSequenced, isModule ) {

	
	var canNavigate = true;
	if( isModule ) {
		var rpcResponse = D2L.Rpc.CreateSynchronous( 'GetModuleTopicsCount', '/d2l/lms/content/viewer/main_frame_2.d2l' ).Call( objectId );
		if( rpcResponse.GetResult() == '' || rpcResponse.GetResult() == 0 ) {
			if( frames['ContentFrame'] && frames['ContentFrame']['AlertNoTopicsAvailable'] ) {
				frames['ContentFrame']['AlertNoTopicsAvailable']();
			}
			canNavigate = false;
		}
	}

	if( canNavigate ) {
		
		var rResponse = D2L.Rpc.CreateSynchronous( 'CheckUserTopicAuthorization', '/d2l/lms/content/viewer/main_frame_2.d2l' ).Call( objectId );
		
		var topicIdToAuthorized = rResponse.GetResult();
		
		if( topicIdToAuthorized > 0  ) {
			if( frames['ContentFrame'] && frames['ContentFrame']['AuthorizeUser'] ) {
				var authResult = frames['ContentFrame']['AuthorizeUser']( topicIdToAuthorized );
			
				authResult.Register( 
					function( authOk ) {
						if( authOk ) {
							this.CurrentAction = 'choose';
							this.ChoosedObjectId = objectId;
							this.ChoosedObjectIsSequenced = isSequenced;
							this.UnloadContentFrame( false );
						}
					}
				);
			}
		} else {
			this.CurrentAction = 'choose';
			this.ChoosedObjectId = objectId;
			this.ChoosedObjectIsSequenced = isSequenced;
			this.UnloadContentFrame(false);
		}		
	}
}

NavManager.prototype.DoNavigate = function( navRequest ) {
	if(navRequest == 'exitAll' || navRequest == 'suspendAll' || navRequest == 'abandonAll'){
		window.API_1484_11.SetLmsNavRequest( navRequest );
		this.UnloadContentFrame( false );
	} else if ( navRequest == 'retry' || navRequest == 'retryAll' ) {
		window.API_1484_11.SetLmsNavRequest( navRequest );
		this.UnloadContentFrame( false );
	} else {
		window.API_1484_11.SetNavRequest( navRequest );
		this.UnloadContentFrame( false );
	}
}

NavManager.prototype.SetReadyToNavigate = function() {

	if( this.CurrentTopic.HasSequencing && window.API_1484_11.ActivityId == this.CurrentTopic.ActivityId && window.API_1484_11.IsInitialized && !window.API_1484_11.IsTerminated ) {
		window.API_1484_11.TerminateFromLMS( this.CurrentTopic.TopicId );
	} else {
		if( this.CurrentAction == 'next' || this.CurrentAction == 'prev' ) {
			var HandleMoveNext = function(response) {
				if (response.GetResponseType() == D2L.Rpc.ResponseType.Success) {
					  window.NavManager.CurrentTopic.InitResult(response.GetResult(ViewerData));
				} else {
					  window.NavManager.UnloadContentFrame(true);
				}
			};

			var response = D2L.Rpc.CreateSynchronous('GetNextTopic').Call(this.CurrentTopic.TopicId, (this.CurrentAction == 'next'));
			HandleMoveNext(response);

			this.CurrentAction = '_none_';

		} else if (this.CurrentAction == 'choose') {
			this.CurrentAction = '_none_';
			if( !this.CurrentTopic.HasSequencing && !this.ChoosedObjectIsSequenced) {
				
				
				var response = D2L.Rpc.CreateSynchronous('FetchChosenTopic').Call(this.CurrentTopic.TopicId, this.ChoosedObjectId);
				this.HandleNavigate(response);
			} else if ( !this.CurrentTopic.HasSequencing && this.ChoosedObjectIsSequenced ) {
				
				D2L.Rpc.Create( 'UnloadCurrentTopic', this.HandleUnLoadTopic ).Call( this.CurrentTopic.TopicId );
		
				
				
				D2L.Rpc.Create( 'PerformChooseNavRequest', this.HandleSCORMNavRequest, '/d2l/lms/scorm/runtimeAPI.d2l' ).Call( this.ChoosedObjectId );
			} else if( this.CurrentTopic.HasSequencing && !this.ChoosedObjectIsSequenced ) {
				
				window.API_1484_11.SetLmsNavRequest( '_none_' );
				
				this.UnloadContentFrame( false );

				D2L.Rpc.Create( 'FetchChosenTopic', this.HandleNavigate ).Call( this.CurrentTopic.TopicId, this.ChoosedObjectId );
			} else {
				
				
				
				
				window.API_1484_11.SetLmsNavRequest( '_none_' );
				
				this.UnloadContentFrame( false );

				D2L.Rpc.Create( 'PerformChooseNavRequest', this.HandleSCORMNavRequest, '/d2l/lms/scorm/runtimeAPI.d2l' ).Call( this.ChoosedObjectId );
			}
		}
	}
}

NavManager.prototype.HandleNavigate = function( response ) {
	if( response.GetResponseType() == D2L.Rpc.ResponseType.Success ) {
		window.NavManager.CurrentTopic.InitResult( response.GetResult( ViewerData ) );
	} else {
		window.NavManager.UnloadContentFrame( true );
	}
}

NavManager.prototype.HandleSCORMNavRequest = function( response ) {
	if( response.GetResponseType() == D2L.Rpc.ResponseType.Success ) {
		var rtd = response.GetResult( runtimeData );
		var eCode = rtd.ErrorCode;
		var oldNavRequest = window.API_1484_11.NavRequest;
		
		if( !eCode ) {
			eCode = '';
		}
			
		if( oldNavRequest == 'suspendAll' || oldNavRequest == 'exitAll' || oldNavRequest == 'abandonAll' ) {
			
			var ni = new D2L.NavInfo();
			ni.navigation = '/d2l/lms/content/home.d2l';
			ni.SetParam( 'isFromManage', 1 );
			ni.SetParam( 'showTOC', 1 );
			Nav.Go( ni );
		} else {
			if( eCode == '' || eCode == '0' ) {
				window.NavManager.CurrentTopic.Init( rtd.ReturnValue );
			} else {
				
				if( window.NavManager.SeqErrorsForChoice && window.NavManager.SeqErrorsForChoice[ eCode ] ) {
					var objectId = window.NavManager.ChoosedObjectId;
					if( objectId <= 0 ) {
						objectId = window.NavManager.CurrentTopic.TopicId
					}
					window.NavManager.DisplayErrorDialog( rtd.ErrorCode, true, objectId );
				} else {
					window.NavManager.DisplayErrorDialog( rtd.ErrorCode, false, -1 );
				}
			}
		}
	}
}

NavManager.prototype.DisplayErrorDialog = function( errorCode, isChoicePossible, objectId ) {
	if( frames['ContentFrame'] && frames['ContentFrame']['DisplayScormErrorDialog'] ) {
		frames['ContentFrame']['DisplayScormErrorDialog'](errorCode, isChoicePossible, objectId);
	}
}

NavManager.prototype.UnloadContentFrame = function( reqUserInteraction ) {
	if( frames['ContentFrame'] && frames['ContentFrame']['UnloadTopic'] ) {
		frames['ContentFrame']['UnloadTopic']( reqUserInteraction );
	}
}

NavManager.prototype.SetContentFrameLoaded = function() {
	if( !this.CurrentTopic.LoadedViewer ) {
		frames['ContentFrame']['LoadTopic']();
		this.CurrentTopic.LoadedViewer = true;
	}
}

AuthorizationCallback = function() {
	if ( window.NavManager != null ) {
		if ( window.NavManager.CurrentTopic.TopicId > 0 ) {
			window.NavManager.CurrentTopic.Init(window.NavManager.CurrentTopic.TopicId);
		}
	}
}

window.NavManager = new NavManager();
		//]]>
		</script>
		<script type="text/javascript">
		//<![CDATA[
		var runtimeData = D2L.Class.extend({
		
	Construct: function() {
	
		arguments.callee.$.Construct.call( this );
		
		this.ReturnValue = '';
		this.ErrorCode = '';
		
	},
	
	Deserialize: function( deserializer ) {
		this.ReturnValue = deserializer.GetMember('ReturnValue');
		this.ErrorCode = deserializer.GetMember('ErrorCode');
	}

});

API = function() {
	this.LastError = '0';
	this.IsInitialized = false;
	this.IsTerminated = false;
	this.ActivityId = -1;
	
	this.ErrorMessages = {
		'0':'No error',
		'101':'General Exception',
		'201':'Invalid Argument Error',
		'202':'Element Cannot Have Children',
		'203':'Element Not An Array, Cannot Have Count',
		'301':'Not Initialized',
		'351':'General Set Failure',
		'391':'General Commit Failure',
		'401':'Not Implemented Error',
		'402':'Invalid SetValue, Element is a Keyword',
		'403':'Element Is Read Only',
		'404':'Element is Write Only',
		'405':'Incorrect Data Type'
	}
}

API.prototype.Init = function( activityId ) {
	this.LastError = '0';
	this.IsInitialized = false;
	this.IsTerminated = false;
	this.ActivityId = activityId;
}

API.prototype.LMSInitialize = function(param) {
	this.LastError = '0';

	if( param != '' ) {
		this.LastError = '201';
		return 'false';
	}
	
	if( this.IsInitialized ) {
		this.LastError = '101';
		return 'false';
	} else if ( this.IsTerminated ) {
		this.LastError = '101';
		return 'false';
	} else {

		var rpcResponse = D2L.Rpc.CreateSynchronous( 'PerformInitialize', '/d2l/lms/scorm/runtimeAPI.d2l' ).Call( this.ActivityId, false );
		var rtd = rpcResponse.GetResult( runtimeData );
		if( rtd.ReturnValue == 'true' ) {
			this.IsTerminated = false;
			this.IsInitialized = true;
			
			return 'true';
		} else {
			this.LastError = rtd.ErrorCode.toString();
			return 'false';
		}
	}
}

API.prototype.LMSFinish = function(param) {
	this.LastError = '0';

	if( param != '' ) {
		this.LastError = '201';
		return false;
	}
	
	if( !this.IsInitialized ) {
		this.LastError = '301';
		return 'false';
	} else if ( this.IsTerminated ) {
		this.LastError = '101';
		return 'false';
	} else {
		var rpcResponse = D2L.Rpc.CreateSynchronous( 'PerformTerminate', '/d2l/lms/scorm/runtimeAPI.d2l' ).Call( this.ActivityId, false );
		var rtd = rpcResponse.GetResult( runtimeData );
		if( rtd.ReturnValue == 'true' ) {
			this.IsTerminated = true;
			this.IsInitialized = false;
			
			return 'true';
		} else {
			this.LastError = rtd.ErrorCode.toString();
			return 'false';
		}
	}
}

API.prototype.LMSGetValue = function(param) {
    this.LastError = '0';

    if (param == '') {
        this.LastError = '201';
        return '';
    }

    if (!this.IsInitialized) {
        this.LastError = '301';
        return '';
    } else if (this.IsTerminated) {
        this.LastError = '101';
        return '';
    } else {

        var rpcResponse = D2L.Rpc.CreateSynchronous('PerformGetValue', '/d2l/lms/scorm/runtimeAPI.d2l').Call(this.ActivityId, false, param);
        var rtd = rpcResponse.GetResult(runtimeData);
        if (rtd.ErrorCode.toString() == '0') {
            if (rtd.ReturnValue == null) {
                return '';
            } else {
                return rtd.ReturnValue;
            }
        } else {
            this.LastError = rtd.ErrorCode.toString();
            return '';
        }
    }
}

API.prototype.LMSSetValue = function(param, value) {
	this.LastError = '0';

	if( param == '' ) {
		this.LastError = '201';
		return 'false';
	}

	if( !this.IsInitialized ) {
		this.LastError = '301';
		return 'false';
	} else if ( this.IsTerminated ) {
		this.LastError = '101';
		return 'false';
	} else {
		var rpcResponse = D2L.Rpc.CreateSynchronous( 'PerformSetValue', '/d2l/lms/scorm/runtimeAPI.d2l' ).Call( this.ActivityId, false, param, value );
		var rtd = rpcResponse.GetResult( runtimeData );
		if( rtd.ReturnValue == 'true' ) {
			return 'true';
		} else {
			this.LastError = rtd.ErrorCode.toString();
			return 'false';
		}
	}
}

API.prototype.LMSCommit = function(param) {
	this.LastError = '0';

	if( param != '' ) {
		this.LastError = '201';
		return 'false';
	}
	
	if( !this.IsInitialized ) {
		this.LastError = '301';
		return 'false';
	} else if ( this.IsTerminated ) {
		this.LastError = '101';
		return 'false';
	} else {
		
		return 'true';
	}

}

API.prototype.LMSGetLastError = function() {
	return this.LastError;
}

API.prototype.LMSGetErrorString = function(errorCode) {
	var ret = this.ErrorMessages[errorCode];
	if( ret == undefined ) 
		ret = '';
	
	return ret;
}

API.prototype.LMSGetDiagnostic = function(errorCode) {
	var ret = this.ErrorMessages[errorCode];
	if( ret == undefined ) 
		ret = '';
	
	return ret;
}

window.API = new API();



		//]]>
		</script>
		<script type="text/javascript">
		//<![CDATA[
		API_1484_11 = function() {
	this.LastError = '0';
	this.IsInitialized = false;
	this.IsTerminated = false;
	this.IsTerminatedByLMS = false;
	this.ActivityId = -1;
	this.IsSequenced = false;
	this.NavRequest = '_none_';
	this.version = '1.0';
	
	this.ErrorMessages = {
		'0':'No error',
		'101':'General Exception',
		'102':'General Initialization Failure',
		'103':'Already Initialized',
		'104':'Content Instance Terminated',
		'111':'General Termination Failure',
		'112':'Termination Before Initialization',
		'113':'Termination After Termination',
		'122':'Retrieve Data Before Initialization',
		'123':'Retrieve Data After Termination',
		'132':'Store Data Before Initialization',
		'133':'Store Data After Termination',
		'142':'Commit Before Initialization',
		'143':'Commit After Termination',
		'201':'General Argument Error',
		'301':'General Get Failure',
		'351':'General Set Failure',
		'391':'General Commit Failure',
		'401':'Undefined Data Model Element',
		'402':'Unimplemented Data Model Element',
		'403':'Data Model Element Value Not Initialized',
		'404':'Data Model Element Is Read Only',
		'405':'Data Model Element Is Write Only',
		'406':'Data Model Element Type Mismatch',
		'407':'Data Model Value Out Of Range',
		'408':'Data Model Dependancy Not Established'
	};
}

API_1484_11.prototype.Init = function( activityId, isSequenced ) {
	this.LastError = '0';
	this.NavRequest = '_none_';
	this.IsInitialized = false;
	this.IsTerminated = false;
	this.IsTerminatedByLMS = false;
	this.ActivityId = activityId;
	this.IsSequenced = isSequenced;
}

API_1484_11.prototype.Initialize = function(param) {
	this.LastError = '0';
	this.NavRequest = 'none';

	if( param != '' ) {
		this.LastError = '201';
		return 'false';
	}
	
	if( this.IsInitialized ) {
		this.LastError = '103';
		return 'false';
	} else if ( this.IsTerminated ) {
		this.LastError = '104';
		return 'false';
	} else {

		var rpcResponse = D2L.Rpc.CreateSynchronous( 'PerformInitialize', '/d2l/lms/scorm/runtimeAPI.d2l' ).Call( this.ActivityId, true );
		var rtd = rpcResponse.GetResult( runtimeData );
		if( rtd.ReturnValue == 'true' ) {
			this.IsTerminated = false;
			this.IsInitialized = true;
			
			return 'true';
		} else {
			this.LastError = rtd.ErrorCode.toString();
			return 'false';
		}
	}
}

API_1484_11.prototype.Terminate = function(param) {
	this.LastError = '0';

	if( param != '' ) {
		this.LastError = '201';
		return 'false';
	}
	
	if( !this.IsInitialized ) {
		this.LastError = '112';
		return 'false';
	} else if ( this.IsTerminated ) {
		if( this.IsTerminatedByLMS ) {
			return 'true';
		} else {
			this.LastError = '113';
			return 'false';
		}
	} else {

		
		var rpcResponse;
		if( this.IsSequenced && (this.NavRequest == 'exitAll' ||  this.NavRequest == 'abandonAll' || this.NavRequest == 'retryAll' || this.NavRequest == 'suspendAll')  ) 
			{
				rpcResponse = D2L.Rpc.CreateSynchronous( 'PerformTerminateAll', '/d2l/lms/scorm/runtimeAPI.d2l' ).Call( this.ActivityId, true , this.NavRequest );
			}
		
		else if (this.NavRequest == 'retry'){
				
				this.SetValue('cmi.exit','normal');
				rpcResponse = D2L.Rpc.CreateSynchronous( 'PerformTerminate', '/d2l/lms/scorm/runtimeAPI.d2l' ).Call( this.ActivityId, true );
			}
		else{
			rpcResponse = D2L.Rpc.CreateSynchronous( 'PerformTerminate', '/d2l/lms/scorm/runtimeAPI.d2l' ).Call( this.ActivityId, true );
		}
		
		var rtd = rpcResponse.GetResult( runtimeData );
		if( rtd.ReturnValue == 'true' ) {
			this.IsTerminated = true;
			this.IsInitialized = false;
						
			if( this.IsSequenced ) {
				this.DoNavRequest();
			}
			
			return 'true';
		} else {
			this.LastError = rtd.ErrorCode.toString();
			return 'false';
		}
	}
}

API_1484_11.prototype.TerminateFromLMS = function( objectId ) {
	this.LastError = '0';

	if( !this.IsInitialized ) {
		this.LastError = '112';
	} else {
		this.IsTerminated = true;
		this.IsTerminatedByLMS = true;
		this.IsInitialized = false;
		
		if( this.IsSequenced && this.NavRequest != '_none_' && this.NavRequest != 'none'  && this.NavRequest != '' ) {
			D2L.Rpc.Create( 'PerformTerminateNavRequest', NavManager.HandleSCORMNavRequest, '/d2l/lms/scorm/runtimeAPI.d2l' ).Call( this.ActivityId, objectId, this.NavRequest );
		}
	}
}

API_1484_11.prototype.GetValue = function(param) {
    this.LastError = '0';
    if (param == '') {
        this.LastError = '301';
        return '';
    }

    if (!this.IsInitialized) {
        this.LastError = '122';
        return '';
    } else if (this.IsTerminated) {
        this.LastError = '123';
        return '';
    } else {
        var re = new RegExp('^adl.nav.request_valid.choice.\{target=[A-Z0-9a-z_]+\}$');
        if (param == 'adl.nav.request') {
            return this.NavRequest;
        } else if (param == 'adl.nav.request_valid.continue' || param == 'adl.nav.request_valid.previous' || re.test(param)) {
            return 'unknown';
        } else {
            var rpcResponse = D2L.Rpc.CreateSynchronous('PerformGetValue', '/d2l/lms/scorm/runtimeAPI.d2l').Call(this.ActivityId, true, param);
            var rtd = rpcResponse.GetResult(runtimeData);
            if (rtd.ErrorCode.toString() == '0') {
                if (rtd.ReturnValue == null) {
                    return '';
                } else {
                    return rtd.ReturnValue;
                }
            } else {
                this.LastError = rtd.ErrorCode.toString();
                return '';
            }
        }
    }
}

API_1484_11.prototype.SetValue = function(param, value) {
	this.LastError = '0';

	if( param == '' ) {
		this.LastError = '351';
		return 'false';
	}
	
	if( !this.IsInitialized ) {
		this.LastError = '132';
		return 'false';
	} else if ( this.IsTerminated ) {
		this.LastError = '133';
		return 'false';
	} else {
	
		if( param == 'adl.nav.request' ) {
			if( this.SetNavRequest( value ) ) {
				return 'true';
			} else {
				return 'false';
			}
		} else {
			var rpcResponse = D2L.Rpc.CreateSynchronous( 'PerformSetValue', '/d2l/lms/scorm/runtimeAPI.d2l' ).Call( this.ActivityId, true, param, value );
			var rtd = rpcResponse.GetResult( runtimeData );
			if( rtd.ReturnValue == 'true' ) {
				return 'true';
			} else {
				this.LastError = rtd.ErrorCode.toString();
				return 'false';
			}
		}
	}
}

API_1484_11.prototype.Commit = function(param) {
	this.LastError = '0';

	if( param != '' ) {
		this.LastError = '201';
		return 'false';
	}
	
	if( !this.IsInitialized ) {
		this.LastError = '142';
		return 'false';
	} else if ( this.IsTerminated ) {
		this.LastError = '143';
		return 'false';
	} else {
		
		return 'true';
	}

}

API_1484_11.prototype.GetLastError = function() {
	return this.LastError;
}

API_1484_11.prototype.GetErrorString = function(errorCode) {
	var ret = this.ErrorMessages[errorCode];
	if( ret == undefined ) 
		ret = '';
	
	return ret;
}

API_1484_11.prototype.GetDiagnostic = function(errorCode) {
	var ret = this.ErrorMessages[errorCode];
	if( ret == undefined ) 
		ret = '';
	
	return ret;
}

API_1484_11.prototype.DoNavRequest = function() {
	this.LastError = '0';
	
	if( this.IsSequenced && this.NavRequest != '_none_' && this.NavRequest != 'none'  && this.NavRequest != '' ) {
	
		if( this.NavRequest == 'retry' ) {
			
			D2L.Rpc.Create( 'PerformChooseNavRequest', NavManager.HandleSCORMNavRequest, '/d2l/lms/scorm/runtimeAPI.d2l' ).Call( NavManager.CurrentTopic.TopicId );
		} else if ( this.NavRequest == 'retryAll' ) {
			D2L.Rpc.Create( 'PerformNavRequest', NavManager.HandleSCORMNavRequest, '/d2l/lms/scorm/runtimeAPI.d2l' ).Call( NavManager.CurrentTopic.TopicId, 'start' );
		} else {
			D2L.Rpc.Create( 'PerformNavRequest', NavManager.HandleSCORMNavRequest, '/d2l/lms/scorm/runtimeAPI.d2l' ).Call( NavManager.CurrentTopic.TopicId, this.NavRequest );
		}
	}
}

API_1484_11.prototype.SetLmsNavRequest = function(request) {
	this.LastError = '0';
	var ret = false;
	
	if( request == 'start' || request == 'resumeAll' || request == 'continue' || request == 'previous' || request == 'exit' || request == 'exitAll' || request == 'abandon' || request == 'abandonAll' || request == 'suspendAll' || request == '_none_' || request == 'retry' || request == 'retryAll' ) {
		ret = true;
	}	

	var re = new RegExp( '^\{target=[A-Z0-9a-z_]+\}choice$' );
	if( re.test( request ) ) {
		ret = true;
	}

	if( ret ) {
		this.NavRequest = request;
	} else {
		this.LastError = '406';
	}
	
	return ret;
}

API_1484_11.prototype.SetNavRequest = function(request) {
	this.LastError = '0';
	var ret = false;
	
	if( request == 'continue' || request == 'previous' || request == 'exit' || request == 'exitAll' || request == 'abandon' || request == 'abandonAll' || request == 'suspendAll' || request == '_none_' ) {
		ret = true;
	}	

	var re = new RegExp( '\{target=[A-Z0-9a-z_\.\-]+\}choice' );
	if( re.test( request ) ) {
		ret = true;
	}
	
	if( ret ) {
		this.NavRequest = request;
	} else {
		this.LastError = '406';
	}
	
	return ret;	
}

window.API_1484_11 = new API_1484_11();


		//]]>
		</script>
		<script type="text/javascript">
		//<![CDATA[
		var origCols;
		var TOChidden = false;

		function hideShowTOC() {
			var frameset = document.getElementById("masterFrameSet");
			if (TOChidden) {
				TOChidden = false;
				
				var tocFrame =  UI.GetById("TocFrameHtmlId");
				var contentFrame =  UI.GetById("contentFrameHtmlId");
				
				if ( tocFrame != null && contentFrame != null ) {
					contentFrame.noResize  = false;
					tocFrame.noResize  = false;
				}
				
				if( origCols == 0 || origCols == "0%,100%" ) {
					if( UI.GetCulture().IsRightToLeft() ) {
						origCols = "80%,20%";
					} else {
						origCols = "20%,80%";
					}
					
				}
				
				frameset.cols = origCols;
			} else {
				origCols = frameset.cols;
				if( UI.GetCulture().IsRightToLeft() ) {
					frameset.cols = "100%,0%";
				} else {
					frameset.cols = "0%,100%";
				}
				TOChidden=true;
				
				var tocFrame = UI.GetById("TocFrameHtmlId");
				var contentFrame = UI.GetById("contentFrameHtmlId");
				
				if ( tocFrame != null && contentFrame != null ) {
					contentFrame.noResize = true;
					tocFrame.noResize = true;
				}
			}
		}
				
		function ResizeContentMap(width){
			var frameset = document.getElementById("masterFrameSet");
			
			if( width == 0 || width == "0%" )
				width = "20%";
				
			if(frameset.cols.indexOf(',') != -1){
				if( UI.GetCulture().IsRightToLeft() ) {
					frameset.cols = '*,' + width ;
				} else {
					frameset.cols = width + ', *';
				}
			}
		}
		
		function GetFrameSetCols(){
			var frameset = document.getElementById("masterFrameSet");
			var cols = frameset.cols;
			return cols;
		}
		//]]>
		</script>
</head>
	<frameset cols="20%, *" id="masterFrameSet" onload="d2l_Onload();" onunload="d2l_Onunload();">
		<noframes>&lt;body&gt;Your browser does not support frames.&lt;/body&gt;</noframes>
		<frame src="navigation_frame.htm" title="Sidebar - Index of Modules and Topics" name="TOCFrame" id="TocFrameHtmlId" frameborder="0" scrolling="auto">
		<frame src="content_frame.htm" title="Actions for Selected Topic" name="ContentFrame" id="contentFrameHtmlId" frameborder="0" scrolling="no">
	</frameset>
</html>